{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tansu\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\n// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { createPortal } from \"react-dom\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [selectedFilter, setSelectedFilter] = useState<string | \"All\">(\"All\")\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n//   const loadAllTransactions = useCallback(async () => {\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n//   const hasMoreData = paginatedTransactions?.nextPage !== null\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={employeeUtils.loading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n//             if (newValue.id === EMPTY_EMPLOYEE.id) {\n//               loadAllTransactions()\n//               setSelectedFilter(\"All\")\n//               return\n//             }\n//             setSelectedFilter(newValue.id)\n//             await loadTransactionsByEmployee(newValue.id)\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n//           {transactions !== null && selectedFilter === \"All\" && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading || !hasMoreData}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\nimport { Fragment, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [selectedFilter, setSelectedFilter] = useState(\"All\");\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const hasMoreData = (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null;\n  const dropdownRef = useRef(null);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const handleToggleDropdown = () => {\n    setIsDropdownOpen(prevState => !prevState);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const renderDropdown = () => {\n    if (!isDropdownOpen) {\n      return null;\n    }\n\n    return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DropdownContainer\",\n      ref: dropdownRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), document.body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"InputSelectContainer\",\n        children: [/*#__PURE__*/_jsxDEV(InputSelect, {\n          isLoading: employeeUtils.loading,\n          defaultValue: EMPTY_EMPLOYEE,\n          items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n          label: \"Filter by employee\",\n          loadingLabel: \"Loading employees\",\n          parseItem: item => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`\n          }),\n          onChange: async newValue => {\n            if (newValue === null) {\n              return;\n            }\n\n            if (newValue.id === EMPTY_EMPLOYEE.id) {\n              loadAllTransactions();\n              setSelectedFilter(\"All\");\n              return;\n            }\n\n            setSelectedFilter(newValue.id);\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), renderDropdown()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), transactions !== null && selectedFilter === \"All\" && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || !hasMoreData,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qrNxPhM2RkQllVHsSS3g6YRJwp0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useRef","useState","createPortal","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","selectedFilter","setSelectedFilter","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","hasMoreData","nextPage","dropdownRef","isDropdownOpen","setIsDropdownOpen","handleToggleDropdown","prevState","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","renderDropdown","body","item","value","id","label","firstName","lastName","newValue"],"sources":["C:/Users/tansu/OneDrive/Masaüstü/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { createPortal } from \"react-dom\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [selectedFilter, setSelectedFilter] = useState<string | \"All\">(\"All\")\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n\n//   const loadAllTransactions = useCallback(async () => {\n//     transactionsByEmployeeUtils.invalidateData()\n\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n\n//   const hasMoreData = paginatedTransactions?.nextPage !== null\n\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n\n//         <hr className=\"RampBreak--l\" />\n\n//         <InputSelect<Employee>\n//           isLoading={employeeUtils.loading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n//             if (newValue.id === EMPTY_EMPLOYEE.id) {\n//               loadAllTransactions()\n//               setSelectedFilter(\"All\")\n//               return\n//             }\n//             setSelectedFilter(newValue.id)\n//             await loadTransactionsByEmployee(newValue.id)\n//           }}\n//         />\n\n//         <div className=\"RampBreak--l\" />\n\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n\n//           {transactions !== null && selectedFilter === \"All\" && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading || !hasMoreData}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\n\nimport { Fragment, useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport { createPortal } from \"react-dom\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [selectedFilter, setSelectedFilter] = useState<string | \"All\">(\"All\")\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  const hasMoreData = paginatedTransactions?.nextPage !== null\n\n  const dropdownRef = useRef(null)\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\n\n  const handleToggleDropdown = () => {\n    setIsDropdownOpen((prevState) => !prevState)\n  }\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsDropdownOpen(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside)\n    }\n  }, [])\n\n  const renderDropdown = () => {\n    if (!isDropdownOpen) {\n      return null\n    }\n\n    return createPortal(\n      <div className=\"DropdownContainer\" ref={dropdownRef}>\n        {/* Dropdown content */}\n      </div>,\n      document.body\n    )\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <div className=\"InputSelectContainer\">\n          <InputSelect\n            isLoading={employeeUtils.loading}\n            defaultValue={EMPTY_EMPLOYEE}\n            items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n            label=\"Filter by employee\"\n            loadingLabel=\"Loading employees\"\n            parseItem={(item) => ({\n              value: item.id,\n              label: `${item.firstName} ${item.lastName}`,\n            })}\n            onChange={async (newValue) => {\n              if (newValue === null) {\n                return\n              }\n              if (newValue.id === EMPTY_EMPLOYEE.id) {\n                loadAllTransactions()\n                setSelectedFilter(\"All\")\n                return\n              }\n              setSelectedFilter(newValue.id)\n              await loadTransactionsByEmployee(newValue.id)\n            }}\n          />\n          {renderDropdown()}\n        </div>\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && selectedFilter === \"All\" && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || !hasMoreData}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}